/**
 * Generated by orval v7.1.1 üç∫
 * Do not edit manually.
 * A Few Words API
 * A RESTful API for managing words
 * OpenAPI spec version: 1.0.0
 */
import * as axios from "axios";
import type { AxiosRequestConfig, AxiosResponse } from "axios";
/**
 * Word

# Example
```json
{
"id": 1,
"word": "hello",
"definition": "a greeting",
"url": "https://example.com",
"created_at": "2024-01-01T00:00:00Z"
}
```
 */
export type Add200 = {
  created_at: string;
  /** @nullable */
  definition?: string | null;
  id: number;
  /** @nullable */
  url?: string | null;
  word: string;
};

export type ListParams = {
  /**
   * The page number to retrieve, starting from 0
   */
  page: number;
  /**
   * The number of words per page, max 100
   */
  size: number;
};

export type TranslateParams = {
  /**
   * The text to translate
   */
  text: string;
};

/**
 * Word

# Example
```json
{
"id": 1,
"word": "hello",
"definition": "a greeting",
"url": "https://example.com",
"created_at": "2024-01-01T00:00:00Z"
}
```
 */
export interface Word {
  created_at: string;
  /** @nullable */
  definition?: string | null;
  id: number;
  /** @nullable */
  url?: string | null;
  word: string;
}

/**
 * Translate response

# Example
```json
{
"text": "Hello, world!"
}
```
 */
export interface TranslateResponse {
  text: string;
}

/**
 * New word

# Example
```json
{
"word": "hello",
"definition": "a greeting",
"url": "https://example.com"
}
```
 */
export interface NewWord {
  /** @nullable */
  definition?: string | null;
  /** @nullable */
  url?: string | null;
  word: string;
}

/**
 * @summary Translate text
 */
export const translate = <TData = AxiosResponse<TranslateResponse>>(
  params: TranslateParams,
  options?: AxiosRequestConfig,
): Promise<TData> => {
  return axios.default.get(`/translate`, {
    ...options,
    params: { ...params, ...options?.params },
  });
};

/**
 * @summary Retrieve a list of words
 */
export const list = <TData = AxiosResponse<Word[]>>(
  params: ListParams,
  options?: AxiosRequestConfig,
): Promise<TData> => {
  return axios.default.get(`/words`, {
    ...options,
    params: { ...params, ...options?.params },
  });
};

/**
 * @summary Add a new word
 */
export const add = <TData = AxiosResponse<Add200>>(
  newWord: NewWord,
  options?: AxiosRequestConfig,
): Promise<TData> => {
  return axios.default.post(`/words`, newWord, options);
};

/**
 * @summary Retrieve a word by ID
 */
export const retrieve = <TData = AxiosResponse<Word>>(
  id: number,
  options?: AxiosRequestConfig,
): Promise<TData> => {
  return axios.default.get(`/words/${id}`, options);
};

/**
 * @summary Delete a word by ID
 */
export const _delete = <TData = AxiosResponse<void>>(
  wordId: number,
  options?: AxiosRequestConfig,
): Promise<TData> => {
  return axios.default.delete(`/words/${wordId}`, options);
};

export type TranslateResult = AxiosResponse<TranslateResponse>;
export type ListResult = AxiosResponse<Word[]>;
export type AddResult = AxiosResponse<Add200>;
export type RetrieveResult = AxiosResponse<Word>;
export type _DeleteResult = AxiosResponse<void>;
